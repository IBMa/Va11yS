{"version":3,"file":"router-testing.umd.js","sources":["../../../packages/router/esm5/testing/src/router_testing_module.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location, LocationStrategy } from '@angular/common';\nimport { MockLocationStrategy, SpyLocation } from '@angular/common/testing';\nimport { Compiler, Injectable, Injector, NgModule, NgModuleFactoryLoader, Optional } from '@angular/core';\nimport { ChildrenOutletContexts, NoPreloading, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTES, Router, RouterModule, UrlHandlingStrategy, UrlSerializer, provideRoutes, ɵROUTER_PROVIDERS as ROUTER_PROVIDERS, ɵflatten as flatten } from '@angular/router';\n/**\n * \\@whatItDoes Allows to simulate the loading of ng modules in tests.\n *\n * \\@howToUse\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * \\@Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * \\@NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * \\@stable\n */\nvar SpyNgModuleFactoryLoader = /** @class */ (function () {\n    function SpyNgModuleFactoryLoader(compiler) {\n        this.compiler = compiler;\n        /**\n         * \\@docsNotRequired\n         */\n        this._stubbedModules = {};\n    }\n    Object.defineProperty(SpyNgModuleFactoryLoader.prototype, \"stubbedModules\", {\n        /**\n         * @docsNotRequired\n         */\n        get: /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        function () { return this._stubbedModules; },\n        /**\n         * @docsNotRequired\n         */\n        set: /**\n         * \\@docsNotRequired\n         * @param {?} modules\n         * @return {?}\n         */\n        function (modules) {\n            var /** @type {?} */ res = {};\n            for (var _i = 0, _a = Object.keys(modules); _i < _a.length; _i++) {\n                var t = _a[_i];\n                res[t] = this.compiler.compileModuleAsync(modules[t]);\n            }\n            this._stubbedModules = res;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SpyNgModuleFactoryLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        if (this._stubbedModules[path]) {\n            return this._stubbedModules[path];\n        }\n        else {\n            return /** @type {?} */ (Promise.reject(new Error(\"Cannot find module \" + path)));\n        }\n    };\n    SpyNgModuleFactoryLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SpyNgModuleFactoryLoader.ctorParameters = function () { return [\n        { type: Compiler, },\n    ]; };\n    return SpyNgModuleFactoryLoader;\n}());\nexport { SpyNgModuleFactoryLoader };\nfunction SpyNgModuleFactoryLoader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    SpyNgModuleFactoryLoader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    SpyNgModuleFactoryLoader.ctorParameters;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    SpyNgModuleFactoryLoader.prototype._stubbedModules;\n    /** @type {?} */\n    SpyNgModuleFactoryLoader.prototype.compiler;\n}\n/**\n * @param {?} opts\n * @return {?}\n */\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * \\@stable\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} loader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} routes\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @return {?}\n */\nexport function setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    var /** @type {?} */ router = new Router(/** @type {?} */ ((null)), urlSerializer, contexts, location, injector, loader, compiler, flatten(routes));\n    // Handle deprecated argument ordering.\n    if (opts) {\n        if (isUrlHandlingStrategy(opts)) {\n            router.urlHandlingStrategy = opts;\n        }\n        else if (opts.paramsInheritanceStrategy) {\n            router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n        }\n    }\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router;\n}\n/**\n * \\@whatItDoes Sets up the router to be used for testing.\n *\n * \\@howToUse\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * \\@description\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of {\\@link Location}, {\\@link LocationStrategy}, and {\\@link\n * NgModuleFactoryLoader}.\n *\n * \\@stable\n */\nvar RouterTestingModule = /** @class */ (function () {\n    function RouterTestingModule() {\n    }\n    /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    RouterTestingModule.withRoutes = /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    function (routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                provideRoutes(routes),\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ]\n        };\n    };\n    RouterTestingModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [RouterModule],\n                    providers: [\n                        ROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\n                        { provide: LocationStrategy, useClass: MockLocationStrategy },\n                        { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n                            provide: Router,\n                            useFactory: setupTestingRouter,\n                            deps: [\n                                UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n                                ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n                            ]\n                        },\n                        { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    RouterTestingModule.ctorParameters = function () { return []; };\n    return RouterTestingModule;\n}());\nexport { RouterTestingModule };\nfunction RouterTestingModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterTestingModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterTestingModule.ctorParameters;\n}\n//# sourceMappingURL=router_testing_module.js.map"],"names":["Injectable","Compiler","Router","flatten","provideRoutes","ROUTER_CONFIGURATION","NgModule","RouterModule","ROUTER_PROVIDERS","Location","SpyLocation","LocationStrategy","MockLocationStrategy","NgModuleFactoryLoader","UrlSerializer","ChildrenOutletContexts","Injector","ROUTES","UrlHandlingStrategy","Optional","PreloadingStrategy","NoPreloading"],"mappings":"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"}