"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const ajv = require("ajv");
const http = require("http");
const Observable_1 = require("rxjs/Observable");
const fromPromise_1 = require("rxjs/observable/fromPromise");
const of_1 = require("rxjs/observable/of");
const map_1 = require("rxjs/operators/map");
function _parseJsonPointer(pointer) {
    if (pointer === '') {
        return [];
    }
    if (pointer.charAt(0) !== '/') {
        throw new Error('Invalid JSON pointer: ' + pointer);
    }
    return pointer.substring(1).split(/\//).map(str => str.replace(/~1/g, '/').replace(/~0/g, '~'));
}
function _visitJsonSchema(schema, visitor) {
    const keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true,
    };
    const propsKeywords = {
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true,
    };
    function _traverse(schema, jsonPtr, rootSchema, parentSchema, keyIndex) {
        if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
            visitor(schema, jsonPtr, parentSchema, keyIndex);
            for (const key of Object.keys(schema)) {
                const sch = schema[key];
                if (Array.isArray(sch)) {
                    if (key == 'items') {
                        for (let i = 0; i < sch.length; i++) {
                            _traverse(sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, schema, '' + i);
                        }
                    }
                }
                else if (key in propsKeywords) {
                    if (sch && typeof sch == 'object') {
                        for (const prop of Object.keys(sch)) {
                            _traverse(sch[prop], jsonPtr + '/' + key + '/' + prop.replace(/~/g, '~0').replace(/\//g, '~1'), rootSchema, schema, prop);
                        }
                    }
                }
                else if (key in keywords) {
                    _traverse(sch, jsonPtr + '/' + key, rootSchema, schema, key);
                }
            }
        }
    }
    _traverse(schema, '', schema);
}
class CoreSchemaRegistry {
    constructor(formats = []) {
        /**
         * Build an AJV instance that will be used to validate schemas.
         */
        this._uriCache = new Map();
        const formatsObj = {};
        for (const format of formats) {
            formatsObj[format.name] = format.formatter;
        }
        this._ajv = ajv({
            removeAdditional: 'all',
            useDefaults: true,
            formats: formatsObj,
            loadSchema: (uri) => this._fetch(uri),
        });
        this._ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));
    }
    _clean(data, // tslint:disable-line:no-any
        schema, validate, parentDataCache) {
        _visitJsonSchema(schema, (currentSchema, pointer, parentSchema, index) => {
            // If we're at the root, skip.
            if (parentSchema === undefined || index === undefined) {
                return;
            }
            const parsedPointer = _parseJsonPointer(pointer);
            // Every other path fragment is either 'properties', 'items', 'allOf', ...
            const nonPropertyParsedPP = parsedPointer.filter((_, i) => !(i % 2));
            // Skip if it's part of a definitions or too complex for us to analyze.
            if (nonPropertyParsedPP.some(f => f == 'definitions' || f == 'allOf' || f == 'anyOf')) {
                return;
            }
            let maybeParentData = parentDataCache.get(parentSchema);
            if (!maybeParentData) {
                // Every other path fragment is either 'properties' or 'items' in this model.
                const parentDataPointer = parsedPointer.filter((_, i) => i % 2);
                // Find the parentData from the list.
                maybeParentData = data;
                for (const index of parentDataPointer.slice(0, -1)) {
                    if (maybeParentData[index] === undefined) {
                        // tslint:disable-next-line:no-any
                        if (parentSchema.hasOwnProperty('items') || parentSchema['type'] == 'array') {
                            maybeParentData[index] = [];
                        }
                        else {
                            maybeParentData[index] = {};
                        }
                    }
                    maybeParentData = maybeParentData[index];
                }
                parentDataCache.set(parentSchema, maybeParentData);
            }
            if (currentSchema.hasOwnProperty('$ref')) {
                const $ref = currentSchema['$ref'];
                const refHash = $ref.split('#', 2)[1];
                const refUrl = $ref.startsWith('#') ? $ref : $ref.split('#', 1);
                let refVal = validate;
                if (!$ref.startsWith('#')) {
                    // tslint:disable-next-line:no-any
                    refVal = validate.refVal[validate.refs[refUrl[0]]];
                }
                if (refHash) {
                    // tslint:disable-next-line:no-any
                    refVal = refVal.refVal[refVal.refs['#' + refHash]];
                }
                maybeParentData[index] = {};
                this._clean(maybeParentData[index], refVal.schema, refVal, parentDataCache);
                return;
            }
            else if (!maybeParentData.hasOwnProperty(index)) {
                maybeParentData[index] = undefined;
            }
        });
    }
    _fetch(uri) {
        const maybeSchema = this._uriCache.get(uri);
        if (maybeSchema) {
            return Promise.resolve(maybeSchema);
        }
        return new Promise((resolve, reject) => {
            http.get(uri, res => {
                if (!res.statusCode || res.statusCode >= 300) {
                    // Consume the rest of the data to free memory.
                    res.resume();
                    reject(`Request failed. Status Code: ${res.statusCode}`);
                }
                else {
                    res.setEncoding('utf8');
                    let data = '';
                    res.on('data', chunk => {
                        data += chunk;
                    });
                    res.on('end', () => {
                        try {
                            const json = JSON.parse(data);
                            this._uriCache.set(uri, json);
                            resolve(json);
                        }
                        catch (err) {
                            reject(err);
                        }
                    });
                }
            });
        });
    }
    compile(schema) {
        // Supports both synchronous and asynchronous compilation, by trying the synchronous
        // version first, then if refs are missing this will fails.
        // We also add any refs from external fetched schemas so that those will also be used
        // in synchronous (if available).
        let validator;
        try {
            const maybeFnValidate = this._ajv.compile(schema);
            validator = of_1.of(maybeFnValidate);
        }
        catch (e) {
            // Propagate the error.
            if (!(e instanceof ajv.MissingRefError)) {
                throw e;
            }
            validator = new Observable_1.Observable(obs => {
                this._ajv.compileAsync(schema)
                    .then(validate => {
                    obs.next(validate);
                    obs.complete();
                }, err => {
                    obs.error(err);
                });
            });
        }
        return validator
            .pipe(
        // tslint:disable-next-line:no-any
        map_1.map(validate => (data) => {
            const result = validate(data);
            const resultObs = typeof result == 'boolean'
                ? of_1.of(result)
                : fromPromise_1.fromPromise(result);
            return resultObs
                .pipe(map_1.map(result => {
                if (result) {
                    // tslint:disable-next-line:no-any
                    const schemaDataMap = new WeakMap();
                    schemaDataMap.set(schema, data);
                    this._clean(data, schema, validate, schemaDataMap);
                    return { success: true };
                }
                return {
                    success: false,
                    errors: (validate.errors || [])
                        .map((err) => `${err.dataPath} ${err.message}`),
                };
            }));
        }));
    }
    addFormat(format) {
        // tslint:disable-next-line:no-any
        const validate = (data) => {
            const result = format.formatter.validate(data);
            return result instanceof Observable_1.Observable ? result.toPromise() : result;
        };
        this._ajv.addFormat(format.name, {
            async: format.formatter.async,
            validate,
        });
    }
}
exports.CoreSchemaRegistry = CoreSchemaRegistry;
//# sourceMappingURL=data:application/json;base64,