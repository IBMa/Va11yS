"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const object_1 = require("../utils/object");
const kColors = {
    modifiers: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29],
    },
    colors: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
    },
    bgColors: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
    },
};
const kColorFunctions = object_1.mapObject(kColors, (_, v) => {
    return object_1.mapObject(v, (_, vv) => (x) => `\u001b[${vv[0]}m${x}\u001b[${vv[1]}m`);
});
exports.reset = kColorFunctions.modifiers.reset;
exports.bold = kColorFunctions.modifiers.bold;
exports.dim = kColorFunctions.modifiers.dim;
exports.italic = kColorFunctions.modifiers.italic;
exports.underline = kColorFunctions.modifiers.underline;
exports.inverse = kColorFunctions.modifiers.inverse;
exports.hidden = kColorFunctions.modifiers.hidden;
exports.strikethrough = kColorFunctions.modifiers.strikethrough;
exports.black = kColorFunctions.colors.black;
exports.red = kColorFunctions.colors.red;
exports.green = kColorFunctions.colors.green;
exports.yellow = kColorFunctions.colors.yellow;
exports.blue = kColorFunctions.colors.blue;
exports.magenta = kColorFunctions.colors.magenta;
exports.cyan = kColorFunctions.colors.cyan;
exports.white = kColorFunctions.colors.white;
exports.grey = kColorFunctions.colors.gray;
exports.gray = kColorFunctions.colors.gray;
exports.bgBlack = kColorFunctions.bgColors.bgBlack;
exports.bgRed = kColorFunctions.bgColors.bgRed;
exports.bgGreen = kColorFunctions.bgColors.bgGreen;
exports.bgYellow = kColorFunctions.bgColors.bgYellow;
exports.bgBlue = kColorFunctions.bgColors.bgBlue;
exports.bgMagenta = kColorFunctions.bgColors.bgMagenta;
exports.bgCyan = kColorFunctions.bgColors.bgCyan;
exports.bgWhite = kColorFunctions.bgColors.bgWhite;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW5zbC9Tb3VyY2VzL2hhbnNsL2RldmtpdC8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2NvcmUvc3JjL3Rlcm1pbmFsL2NvbG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILDRDQUE0QztBQUU1QyxNQUFNLE9BQU8sR0FBRztJQUNkLFNBQVMsRUFBRTtRQUNULEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDYixJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2IsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNaLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDZixTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDaEIsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNmLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7S0FDdkI7SUFDRCxNQUFNLEVBQUU7UUFDTixLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2YsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNiLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDZixNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDZCxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2pCLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDZCxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2YsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUNmO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNqQixLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2YsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNqQixRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDaEIsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNuQixNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDbEI7Q0FDRixDQUFDO0FBQ0YsTUFBTSxlQUFlLEdBQUcsa0JBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDbEQsTUFBTSxDQUFDLGtCQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hGLENBQUMsQ0FBQyxDQUFDO0FBR1UsUUFBQSxLQUFLLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDeEMsUUFBQSxJQUFJLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDdEMsUUFBQSxHQUFHLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUFDcEMsUUFBQSxNQUFNLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDMUMsUUFBQSxTQUFTLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDaEQsUUFBQSxPQUFPLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDNUMsUUFBQSxNQUFNLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDMUMsUUFBQSxhQUFhLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7QUFFeEQsUUFBQSxLQUFLLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDckMsUUFBQSxHQUFHLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDakMsUUFBQSxLQUFLLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDckMsUUFBQSxNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDdkMsUUFBQSxJQUFJLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDbkMsUUFBQSxPQUFPLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDekMsUUFBQSxJQUFJLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDbkMsUUFBQSxLQUFLLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDckMsUUFBQSxJQUFJLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDbkMsUUFBQSxJQUFJLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFFbkMsUUFBQSxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDM0MsUUFBQSxLQUFLLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDdkMsUUFBQSxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDM0MsUUFBQSxRQUFRLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDN0MsUUFBQSxNQUFNLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDekMsUUFBQSxTQUFTLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFDL0MsUUFBQSxNQUFNLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDekMsUUFBQSxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBtYXBPYmplY3QgfSBmcm9tICcuLi91dGlscy9vYmplY3QnO1xuXG5jb25zdCBrQ29sb3JzID0ge1xuICBtb2RpZmllcnM6IHtcbiAgICByZXNldDogWzAsIDBdLFxuICAgIGJvbGQ6IFsxLCAyMl0sIC8vIDIxIGlzbid0IHdpZGVseSBzdXBwb3J0ZWQgYW5kIDIyIGRvZXMgdGhlIHNhbWUgdGhpbmdcbiAgICBkaW06IFsyLCAyMl0sXG4gICAgaXRhbGljOiBbMywgMjNdLFxuICAgIHVuZGVybGluZTogWzQsIDI0XSxcbiAgICBpbnZlcnNlOiBbNywgMjddLFxuICAgIGhpZGRlbjogWzgsIDI4XSxcbiAgICBzdHJpa2V0aHJvdWdoOiBbOSwgMjldLFxuICB9LFxuICBjb2xvcnM6IHtcbiAgICBibGFjazogWzMwLCAzOV0sXG4gICAgcmVkOiBbMzEsIDM5XSxcbiAgICBncmVlbjogWzMyLCAzOV0sXG4gICAgeWVsbG93OiBbMzMsIDM5XSxcbiAgICBibHVlOiBbMzQsIDM5XSxcbiAgICBtYWdlbnRhOiBbMzUsIDM5XSxcbiAgICBjeWFuOiBbMzYsIDM5XSxcbiAgICB3aGl0ZTogWzM3LCAzOV0sXG4gICAgZ3JheTogWzkwLCAzOV0sXG4gIH0sXG4gIGJnQ29sb3JzOiB7XG4gICAgYmdCbGFjazogWzQwLCA0OV0sXG4gICAgYmdSZWQ6IFs0MSwgNDldLFxuICAgIGJnR3JlZW46IFs0MiwgNDldLFxuICAgIGJnWWVsbG93OiBbNDMsIDQ5XSxcbiAgICBiZ0JsdWU6IFs0NCwgNDldLFxuICAgIGJnTWFnZW50YTogWzQ1LCA0OV0sXG4gICAgYmdDeWFuOiBbNDYsIDQ5XSxcbiAgICBiZ1doaXRlOiBbNDcsIDQ5XSxcbiAgfSxcbn07XG5jb25zdCBrQ29sb3JGdW5jdGlvbnMgPSBtYXBPYmplY3Qoa0NvbG9ycywgKF8sIHYpID0+IHtcbiAgcmV0dXJuIG1hcE9iamVjdCh2LCAoXywgdnYpID0+ICh4OiBzdHJpbmcpID0+IGBcXHUwMDFiWyR7dnZbMF19bSR7eH1cXHUwMDFiWyR7dnZbMV19bWApO1xufSk7XG5cblxuZXhwb3J0IGNvbnN0IHJlc2V0ID0ga0NvbG9yRnVuY3Rpb25zLm1vZGlmaWVycy5yZXNldDtcbmV4cG9ydCBjb25zdCBib2xkID0ga0NvbG9yRnVuY3Rpb25zLm1vZGlmaWVycy5ib2xkO1xuZXhwb3J0IGNvbnN0IGRpbSA9IGtDb2xvckZ1bmN0aW9ucy5tb2RpZmllcnMuZGltO1xuZXhwb3J0IGNvbnN0IGl0YWxpYyA9IGtDb2xvckZ1bmN0aW9ucy5tb2RpZmllcnMuaXRhbGljO1xuZXhwb3J0IGNvbnN0IHVuZGVybGluZSA9IGtDb2xvckZ1bmN0aW9ucy5tb2RpZmllcnMudW5kZXJsaW5lO1xuZXhwb3J0IGNvbnN0IGludmVyc2UgPSBrQ29sb3JGdW5jdGlvbnMubW9kaWZpZXJzLmludmVyc2U7XG5leHBvcnQgY29uc3QgaGlkZGVuID0ga0NvbG9yRnVuY3Rpb25zLm1vZGlmaWVycy5oaWRkZW47XG5leHBvcnQgY29uc3Qgc3RyaWtldGhyb3VnaCA9IGtDb2xvckZ1bmN0aW9ucy5tb2RpZmllcnMuc3RyaWtldGhyb3VnaDtcblxuZXhwb3J0IGNvbnN0IGJsYWNrID0ga0NvbG9yRnVuY3Rpb25zLmNvbG9ycy5ibGFjaztcbmV4cG9ydCBjb25zdCByZWQgPSBrQ29sb3JGdW5jdGlvbnMuY29sb3JzLnJlZDtcbmV4cG9ydCBjb25zdCBncmVlbiA9IGtDb2xvckZ1bmN0aW9ucy5jb2xvcnMuZ3JlZW47XG5leHBvcnQgY29uc3QgeWVsbG93ID0ga0NvbG9yRnVuY3Rpb25zLmNvbG9ycy55ZWxsb3c7XG5leHBvcnQgY29uc3QgYmx1ZSA9IGtDb2xvckZ1bmN0aW9ucy5jb2xvcnMuYmx1ZTtcbmV4cG9ydCBjb25zdCBtYWdlbnRhID0ga0NvbG9yRnVuY3Rpb25zLmNvbG9ycy5tYWdlbnRhO1xuZXhwb3J0IGNvbnN0IGN5YW4gPSBrQ29sb3JGdW5jdGlvbnMuY29sb3JzLmN5YW47XG5leHBvcnQgY29uc3Qgd2hpdGUgPSBrQ29sb3JGdW5jdGlvbnMuY29sb3JzLndoaXRlO1xuZXhwb3J0IGNvbnN0IGdyZXkgPSBrQ29sb3JGdW5jdGlvbnMuY29sb3JzLmdyYXk7XG5leHBvcnQgY29uc3QgZ3JheSA9IGtDb2xvckZ1bmN0aW9ucy5jb2xvcnMuZ3JheTtcblxuZXhwb3J0IGNvbnN0IGJnQmxhY2sgPSBrQ29sb3JGdW5jdGlvbnMuYmdDb2xvcnMuYmdCbGFjaztcbmV4cG9ydCBjb25zdCBiZ1JlZCA9IGtDb2xvckZ1bmN0aW9ucy5iZ0NvbG9ycy5iZ1JlZDtcbmV4cG9ydCBjb25zdCBiZ0dyZWVuID0ga0NvbG9yRnVuY3Rpb25zLmJnQ29sb3JzLmJnR3JlZW47XG5leHBvcnQgY29uc3QgYmdZZWxsb3cgPSBrQ29sb3JGdW5jdGlvbnMuYmdDb2xvcnMuYmdZZWxsb3c7XG5leHBvcnQgY29uc3QgYmdCbHVlID0ga0NvbG9yRnVuY3Rpb25zLmJnQ29sb3JzLmJnQmx1ZTtcbmV4cG9ydCBjb25zdCBiZ01hZ2VudGEgPSBrQ29sb3JGdW5jdGlvbnMuYmdDb2xvcnMuYmdNYWdlbnRhO1xuZXhwb3J0IGNvbnN0IGJnQ3lhbiA9IGtDb2xvckZ1bmN0aW9ucy5iZ0NvbG9ycy5iZ0N5YW47XG5leHBvcnQgY29uc3QgYmdXaGl0ZSA9IGtDb2xvckZ1bmN0aW9ucy5iZ0NvbG9ycy5iZ1doaXRlO1xuIl19