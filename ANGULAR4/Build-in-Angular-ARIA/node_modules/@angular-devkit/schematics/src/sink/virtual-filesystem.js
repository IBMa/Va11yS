"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const concat_1 = require("rxjs/observable/concat");
const empty_1 = require("rxjs/observable/empty");
const from_1 = require("rxjs/observable/from");
const of_1 = require("rxjs/observable/of");
const operators_1 = require("rxjs/operators");
const update_buffer_1 = require("../utility/update-buffer");
const sink_1 = require("./sink");
class VirtualFileSystemSink extends sink_1.SimpleSinkBase {
    constructor(_host, _force = false) {
        super();
        this._host = _host;
        this._force = _force;
        this._filesToDelete = new Set();
        this._filesToRename = new Set();
        this._filesToCreate = new Map();
        this._filesToUpdate = new Map();
    }
    _validateCreateAction(action) {
        return this._force ? empty_1.empty() : super._validateCreateAction(action);
    }
    _validateFileExists(p) {
        if (this._filesToCreate.has(p) || this._filesToUpdate.has(p)) {
            return of_1.of(true);
        }
        else if (this._filesToDelete.has(p)) {
            return of_1.of(false);
        }
        else {
            return this._host.exists(p);
        }
    }
    _overwriteFile(path, content) {
        this._filesToUpdate.set(path, new update_buffer_1.UpdateBuffer(content));
        return empty_1.empty();
    }
    _createFile(path, content) {
        this._filesToCreate.set(path, new update_buffer_1.UpdateBuffer(content));
        return empty_1.empty();
    }
    _renameFile(from, to) {
        this._filesToRename.add([from, to]);
        return empty_1.empty();
    }
    _deleteFile(path) {
        if (this._filesToCreate.has(path)) {
            this._filesToCreate.delete(path);
            this._filesToUpdate.delete(path);
        }
        else {
            this._filesToDelete.add(path);
        }
        return empty_1.empty();
    }
    _done() {
        // Really commit everything to the actual filesystem.
        return concat_1.concat(from_1.from([...this._filesToDelete.values()]).pipe(operators_1.concatMap(path => this._host.delete(path))), from_1.from([...this._filesToCreate.entries()]).pipe(operators_1.concatMap(([path, buffer]) => this._host.write(path, buffer.generate()))), from_1.from([...this._filesToRename.entries()]).pipe(operators_1.concatMap(([_, [path, to]]) => this._host.rename(path, to))), from_1.from([...this._filesToUpdate.entries()]).pipe(operators_1.concatMap(([path, buffer]) => this._host.write(path, buffer.generate())))).pipe(operators_1.reduce(() => { }));
    }
}
exports.VirtualFileSystemSink = VirtualFileSystemSink;
//# sourceMappingURL=data:application/json;base64,